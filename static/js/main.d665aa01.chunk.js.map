{"version":3,"sources":["TodoContext.jsx","TodoItem.jsx","hooks.js","TodoList.jsx","TodosFilter.jsx","App.js","index.js"],"names":["TodoContext","React","createContext","todos","setTodo","TodoItem","fun","todo","useContext","useState","isEditable","setIsEditable","title","changedValue","setChangedValue","htmlElRef","useRef","current","focus","useFocus","inputRef","setInputFocus","useEffect","updateTodo","map","todoCurrent","id","filter","key","className","classNames","completed","editing","onDoubleClick","type","checked","onChange","onClick","event","target","value","ref","onBlur","onKeyDown","TodoList","visibleTodos","defaultProps","TodosFilter","setVisibleTodos","setValue","handleClick","todosToBeShown","newValue","innerText","href","selected","App","setTitle","initialValue","JSON","parse","localStorage","getItem","setItem","stringify","useLocalStorage","isAllCompleted","setIsAllCompleted","every","contextValue","Provider","onSubmit","preventDefault","newTodo","Date","placeholder","length","htmlFor","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d665aa01.chunk.js","sourcesContent":["import React from 'react';\n\nexport const TodoContext = React.createContext({\n  todos: [],\n  setTodo: () => {},\n});\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoContext } from './TodoContext';\nimport { useFocus } from './hooks';\n\nexport const TodoItem = ({ todo }) => {\n  const { todos, setTodo } = useContext(TodoContext);\n  const [isEditable, setIsEditable] = useState(false);\n  const [changedValue, setChangedValue] = useState(todo.title);\n\n  const useMountEffect = fun => useEffect(fun, [isEditable]);\n\n  const [inputRef, setInputFocus] = useFocus();\n\n  useMountEffect(setInputFocus);\n\n  const handleChange = () => {\n    setTodo(todos.map((todoCurrent) => {\n      if (todoCurrent.id === todo.id) {\n        return ({\n          ...todoCurrent,\n          completed: !todoCurrent.completed,\n        });\n      }\n\n      return todoCurrent;\n    }));\n  };\n\n  const deleteTodo = () => {\n    setTodo(todos.filter(todoCurrent => todoCurrent.id !== todo.id));\n  };\n\n  const updateTodo = () => {\n    if (changedValue !== '') {\n      setTodo(todos.map((todoCurrent) => {\n        if (todoCurrent.id === todo.id) {\n          return ({\n            ...todoCurrent,\n            title: changedValue,\n          });\n        }\n\n        return todoCurrent;\n      }));\n      setIsEditable(false);\n    } else {\n      setTodo(todos.filter(todoCurrent => todoCurrent.id !== todo.id));\n      setIsEditable(false);\n    }\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      updateTodo();\n    }\n\n    if (event.key === 'Escape') {\n      setChangedValue(todo.title);\n      setIsEditable(false);\n    }\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames({\n        completed: todo.completed,\n        editing: isEditable,\n      })}\n      onDoubleClick={() => {\n        setIsEditable(true);\n      }}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={handleChange}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={deleteTodo}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        onChange={event => setChangedValue(event.target.value)}\n        value={changedValue}\n        ref={inputRef}\n        onBlur={updateTodo}\n        onKeyDown={handleKeyPress}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useRef, useState } from 'react';\n\nexport const useFocus = () => {\n  const htmlElRef = useRef(null);\n  const setFocus = () => {\n    htmlElRef.current && htmlElRef.current.focus();\n  };\n\n  return [htmlElRef, setFocus];\n};\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ visibleTodos }) => (\n  <ul className=\"todo-list\">\n    {visibleTodos.map(todo => <TodoItem todo={todo} />)}\n\n  </ul>\n);\n\nTodoList.propTypes = {\n  visibleTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    completed: PropTypes.bul,\n    title: PropTypes.string,\n  })),\n};\n\nTodoList.defaultProps = {\n  visibleTodos: [],\n};\n","import React, { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoContext } from './TodoContext';\n\nexport const TodosFilter = ({ setVisibleTodos }) => {\n  const { todos } = useContext(TodoContext);\n  const [value, setValue] = useState('All');\n\n  const handleClick = (event) => {\n    const newValue = event.target.innerText;\n\n    setValue(newValue);\n\n    let todosToBeShown;\n\n    switch (newValue) {\n      case 'Active':\n        todosToBeShown = todos.filter(todo => !todo.completed);\n        break;\n      case 'Completed':\n        todosToBeShown = todos.filter(todo => todo.completed);\n        break;\n      case 'All':\n      default:\n        todosToBeShown = todos;\n    }\n\n    setVisibleTodos(todosToBeShown);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames({ selected: value === 'All' })}\n          onClick={handleClick}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classNames({ selected: value === 'Active' })}\n          onClick={handleClick}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classNames({ selected: value === 'Completed' })}\n          onClick={handleClick}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  setVisibleTodos: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect} from 'react';\nimport { useLocalStorage } from './hooks';\nimport { TodoContext } from './TodoContext';\nimport { TodoList } from './TodoList';\nimport { TodosFilter } from './TodosFilter';\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [todos, setTodo] = useLocalStorage('todos', []);\n  const [visibleTodos, setVisibleTodos] = useState([]);\n  const [isAllCompleted, setIsAllCompleted] = useState(false);\n\n  useEffect(() => {\n    setVisibleTodos(todos);\n    setIsAllCompleted(todos.every(todo => todo.completed));\n  }, [todos]);\n\n  const createTodo = (event) => {\n    event.preventDefault();\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    if (title === '') {\n      return;\n    }\n\n    setTodo([...todos, newTodo]);\n    localStorage.setItem('todos', JSON.stringify([...todos, newTodo]));\n    setTitle('');\n  };\n\n  const contextValue = {\n    todos,\n    setTodo,\n    isAllCompleted,\n    setIsAllCompleted,\n  };\n\n  const handleToggleAllCheckbox = () => {\n    setTodo(todos.map(todo => ({\n      ...todo,\n      completed: !isAllCompleted,\n    })));\n    setIsAllCompleted(!isAllCompleted);\n  };\n\n  const handleClearButton = () => {\n    setTodo(todos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <TodoContext.Provider value={contextValue}>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={createTodo}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={title}\n              onChange={(event) => {\n                setTitle(event.target.value);\n              }}\n            />\n          </form>\n        </header>\n\n        {todos.length > 0\n          && (\n          <>\n            <section className=\"main\">\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                checked={isAllCompleted}\n                onChange={handleToggleAllCheckbox}\n              />\n              <label htmlFor=\"toggle-all\">\n                Mark all as complete\n              </label>\n              <TodoList visibleTodos={visibleTodos} />\n            </section>\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {`${todos.filter(todo => (\n                  !todo.completed\n                )).length} items left`}\n              </span>\n\n              <TodosFilter setVisibleTodos={setVisibleTodos} />\n\n              {todos.some(todo => todo.completed)\n                && (\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  onClick={handleClearButton}\n                >\n                  Clear completed\n                </button>\n                )\n              }\n            </footer>\n          </>\n          )\n        }\n      </section>\n    </TodoContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}